<!doctype html>
<html lang="fa">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
<title>Crowd Rush Online</title>
<style>
/* ===================== style.css (embedded) ===================== */
:root{
  --bg1:#0ea5e9;
  --bg2:#7dd3fc;
  --accent:#ffde59;
  --panel: rgba(255,255,255,0.9);
  --text:#0b1220;
}
*{box-sizing:border-box}
html,body{height:100%}
body{
  margin:0;
  font-family: "Arial", "Tahoma", sans-serif;
  background: linear-gradient(180deg,var(--bg1),var(--bg2));
  -webkit-tap-highlight-color: transparent;
  color:var(--text);
}
#app{
  width:100%;
  height:100vh;
  display:flex;
  align-items:center;
  justify-content:center;
  flex-direction:column;
}
canvas{ display:block; width:100%; height:100%; background:transparent; touch-action:none; }

/* UI overlay */
.ui {
  position: absolute;
  top:12px;
  left:12px;
  right:12px;
  display:flex;
  justify-content:space-between;
  pointer-events:none;
}
.panel {
  pointer-events:auto;
  background:var(--panel);
  padding:8px 12px;
  border-radius:12px;
  box-shadow:0 6px 18px rgba(11,18,32,0.14);
  display:flex;
  gap:10px;
  align-items:center;
}
.title {
  font-weight:800;
  font-size:18px;
}
.btn {
  background:linear-gradient(180deg,#fff, #f4f4f4);
  border-radius:10px;
  padding:8px 12px;
  cursor:pointer;
  user-select:none;
  border: none;
  font-weight:700;
}
.left-panel{ display:flex; gap:8px; align-items:center;}
.right-panel{ display:flex; gap:8px; align-items:center;}

/* start screen */
.start-screen {
  position:absolute;
  z-index:20;
  width:92%;
  max-width:760px;
  background: linear-gradient(180deg, rgba(255,255,255,0.98), rgba(255,255,255,0.95));
  padding:18px;
  border-radius:18px;
  box-shadow: 0 10px 30px rgba(11,18,32,0.18);
  display:flex;
  gap:14px;
  flex-direction:column;
  align-items:center;
  text-align:center;
}
.logo {
  display:flex;
  align-items:center;
  gap:12px;
}
.logo svg { width:56px; height:56px; }
.h1 { font-size:22px; font-weight:900; letter-spacing:1px; }
.desc { font-size:14px; color:#1b2b3a; opacity:0.9; }

/* leaderboard */
.leaderboard {
  width:100%;
  max-width:420px;
  background:linear-gradient(180deg,#fff,#fafafa);
  padding:10px;
  border-radius:12px;
  margin-top:8px;
  text-align:left;
}
.leaderboard h3{ margin:6px 0; font-size:16px; }
.leaderboard ol{ margin:0; padding-left:18px; }

/* bottom controls */
.bottom-bar {
  position:absolute;
  bottom:18px;
  left:12px;
  right:12px;
  display:flex;
  justify-content:space-between;
  pointer-events:none;
}
.icon-btn {
  pointer-events:auto;
  background:var(--panel);
  padding:8px;
  border-radius:10px;
  display:flex;
  gap:8px;
  align-items:center;
  box-shadow:0 6px 14px rgba(11,18,32,0.12);
}

/* responsive hint */
.hint{ font-size:13px; opacity:0.9 }

.small{font-size:12px}
</style>
</head>
<body>
<div id="app">
  <canvas id="game"></canvas>

  <!-- UI -->
  <div class="ui" style="pointer-events:none">
    <div class="left-panel panel">
      <div class="title">Crowd Rush Online</div>
      <div id="crowdCount" class="small">جمع: 0</div>
      <div id="score" class="small">امتیاز: 0</div>
    </div>
    <div class="right-panel panel">
      <button id="soundToggle" class="btn">🔊</button>
      <button id="vibeToggle" class="btn">📳</button>
      <button id="menuBtn" class="btn">منو</button>
    </div>
  </div>

  <!-- Start Screen -->
  <div id="startScreen" class="start-screen" style="max-width:680px;">
    <div class="logo">
      <!-- SVG logo -->
      <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="g1" x1="0" x2="1">
            <stop offset="0" stop-color="#ff7a18"/>
            <stop offset="1" stop-color="#ffde59"/>
          </linearGradient>
        </defs>
        <circle cx="50" cy="50" r="48" fill="url(#g1)"/>
        <g transform="translate(18,22)" fill="#0b1220">
          <rect x="4" y="26" width="9" height="16" rx="3"/>
          <rect x="18" y="20" width="9" height="22" rx="3"/>
          <rect x="32" y="10" width="9" height="32" rx="3"/>
        </g>
      </svg>
      <div style="text-align:left">
        <div class="h1">Crowd Rush Online</div>
        <div class="desc">گروهتو بزرگ کن، دروازه‌ها رو رد کن، با بات‌ها مسابقه بده — ساده و اعتیادآور!</div>
      </div>
    </div>

    <div style="display:flex; gap:10px; margin-top:10px; width:100%; justify-content:center">
      <button id="playBtn" class="btn" style="font-size:18px; padding:12px 18px;">▶ بازی کن</button>
      <button id="practiceBtn" class="btn">آموزش</button>
    </div>

    <div style="display:flex; gap:10px; margin-top:8px; width:100%; justify-content:center">
      <div class="leaderboard" id="leaderboard">
        <h3>جدول امتیازات (محلی)</h3>
        <ol id="leaders"></ol>
      </div>
    </div>

    <div style="display:flex; gap:10px; margin-top:6px; width:100%; justify-content:center">
      <div class="small">نسخه: 1.0 — آفلاین با حس آنلاین</div>
    </div>
  </div>

  <!-- bottom -->
  <div class="bottom-bar">
    <div class="icon-btn panel">
      <div class="hint">لمس و کشیدن برای حرکت</div>
    </div>
    <div class="icon-btn panel">
      <div class="hint">هدف: رسیدن به خط پایان و شکستِ رقیبان</div>
    </div>
  </div>

</div>

<script>
/* ===================== game.js (embedded) ===================== */

/* --- تنظیمات بازی --- */
const config = {
  initialCrowd: 8,
  enemySpawnRate: 0.018,  // احتمال اسپاون در هر فریم
  gateSpawnRate: 0.01,
  enemySpeedBase: 1.6,
  gateSpeed: 1.6,
  gravity: 0,
  maxBots: 5,
  difficultyIncrease: 0.000005
};

/* --- حالت‌ها و وضعیت کلی --- */
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
let W=window.innerWidth, H=window.innerHeight;
canvas.width=W; canvas.height=H;

let running = false, inPractice=false;
let score = 0;
let crowd = { x: W/2, y: H - 150, count: config.initialCrowd, color:'#ff4d6d' };
let enemies = [];
let gates = [];
let bots = []; // رقیب‌ها (برای حس آنلاین)
let frames = 0;
let touchX = null, touching=false;
let vibrateOn = true;
let soundOn = true;

/* --- WebAudio simple engine for music and sfx (so no external files needed) --- */
class AudioEngine {
  constructor(){
    this.ctx = null;
    this.masterGain=null;
    this.musicOsc=null;
    this.started = false;
  }
  async init(){
    if(this.started) return;
    const AudioCtx = window.AudioContext || window.webkitAudioContext;
    this.ctx = new AudioCtx();
    this.masterGain = this.ctx.createGain();
    this.masterGain.connect(this.ctx.destination);
    this.masterGain.gain.value = 0.6;
    this.started = true;
  }
  playTone(freq, dur=0.12, type='sine', vol=0.08){
    if(!this.started || !soundOn) return;
    const o = this.ctx.createOscillator();
    const g = this.ctx.createGain();
    o.type = type;
    o.frequency.value = freq;
    g.gain.setValueAtTime(vol, this.ctx.currentTime);
    g.gain.exponentialRampToValueAtTime(0.0001, this.ctx.currentTime + dur);
    o.connect(g); g.connect(this.masterGain);
    o.start();
    o.stop(this.ctx.currentTime + dur + 0.02);
  }
  playHit(){ this.playTone(800, 0.08, 'square', 0.12); }
  playCheer(){ this.playTone(420, 0.18, 'sawtooth', 0.12); this.playTone(520,0.12,'sine',0.08); }
  async playLoopBackground(){
    if(!this.started || !soundOn) return;
    // light arpeggio background using scheduled tones
    if(this.bgInterval) clearInterval(this.bgInterval);
    let notes = [220, 260, 196, 246];
    let i=0;
    this.bgInterval = setInterval(()=> {
      if(!soundOn) return;
      this.playTone(notes[i%notes.length], 0.22, 'sine', 0.03);
      i++;
    }, 400);
  }
  stopBackground(){
    if(this.bgInterval) clearInterval(this.bgInterval);
    this.bgInterval = null;
  }
}
const audio = new AudioEngine();

/* --- UI elements --- */
const startScreen = document.getElementById('startScreen');
const playBtn = document.getElementById('playBtn');
const practiceBtn = document.getElementById('practiceBtn');
const crowdCountEl = document.getElementById('crowdCount');
const scoreEl = document.getElementById('score');
const leadersEl = document.getElementById('leaders');
const soundToggle = document.getElementById('soundToggle');
const vibeToggle = document.getElementById('vibeToggle');
const menuBtn = document.getElementById('menuBtn');

/* --- helper --- */
function vibrate(ms){ if(vibrateOn && navigator.vibrate) navigator.vibrate(ms); }
function rand(min,max){ return Math.random()*(max-min)+min; }

/* --- simulated online leaderboard (localStorage based) --- */
const LB_KEY = 'crowdRush_leaderboard_v1';
function loadLeaderboard(){ 
  try{ return JSON.parse(localStorage.getItem(LB_KEY) || '[]'); }catch(e){ return []; }
}
function saveLeaderboard(list){ localStorage.setItem(LB_KEY, JSON.stringify(list)); }
function pushScore(name,score){
  let list = loadLeaderboard();
  list.push({name,score,date:Date.now()});
  list.sort((a,b)=>b.score-a.score);
  list = list.slice(0,10);
  saveLeaderboard(list);
}
function renderLeaderboard(){
  let list = loadLeaderboard();
  leadersEl.innerHTML = '';
  if(list.length===0){ leadersEl.innerHTML = '<li>هنوز امتیازی ثبت نشده</li>'; return; }
  list.forEach(item=>{
    let el = document.createElement('li');
    el.textContent = item.name + ' — ' + item.score;
    leadersEl.appendChild(el);
  });
}
renderLeaderboard();

/* --- Bot (رقیب) سیستم برای حس آنلاین --- */
function spawnBot(){
  if(bots.length >= config.maxBots) return;
  let b = {
    id: 'bot'+Date.now()+Math.floor(Math.random()*1000),
    x: rand(60, W-60),
    y: H - 150,
    color: '#3b82f6',
    count: Math.max(6, Math.floor(config.initialCrowd * rand(0.5, 2.0))),
    speed: rand(0.6,1.2)
  };
  bots.push(b);
}

/* --- spawn enemies (group of hostile crowd) --- */
function spawnEnemy(){
  enemies.push({
    x: rand(40, W-40),
    y: -40,
    count: Math.floor(rand(3, 14)),
    speed: config.enemySpeedBase + Math.random(),
    color: '#0ea5e9'
  });
}

/* --- spawn gates (+ or -) --- */
function spawnGate(){
  let t = Math.random() < 0.56 ? 'add' : 'remove';
  gates.push({
    x: rand(40, W-140),
    y: -40,
    w: 110,
    h: 26,
    type: t,
    value: Math.floor(rand(3, 18))
  });
}

/* --- draw small crowd (matrix of dots) --- */
function drawCrowd(x,y,count,color,scale=1){
  let cols = Math.max(1, Math.ceil(Math.sqrt(count)));
  let spacing = 8 * scale;
  let dot = 6 * scale;
  let startX = x - (cols-1)*spacing/2;
  for(let i=0;i<count;i++){
    let cx = startX + (i%cols)*spacing;
    let cy = y - Math.floor(i/cols)*spacing;
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(cx, cy, dot, 0, Math.PI*2);
    ctx.fill();
  }
}

/* --- collisions --- */
function rectCircleCollide(circle, rect){
  // circle: {x,y,r}, rect: {x,y,w,h}
  const distX = Math.abs(circle.x - rect.x - rect.w/2);
  const distY = Math.abs(circle.y - rect.y - rect.h/2);
  if (distX > (rect.w/2 + circle.r)) return false;
  if (distY > (rect.h/2 + circle.r)) return false;
  if (distX <= (rect.w/2)) return true;
  if (distY <= (rect.h/2)) return true;
  const dx = distX - rect.w/2;
  const dy = distY - rect.h/2;
  return (dx*dx + dy*dy <= (circle.r*circle.r));
}

/* --- input --- */
canvas.addEventListener('touchstart', e=>{
  touching = true;
  touchX = e.touches[0].clientX;
});
canvas.addEventListener('touchmove', e=>{
  touchX = e.touches[0].clientX;
});
canvas.addEventListener('touchend', e=>{
  touching = false;
  touchX = null;
});
window.addEventListener('resize', ()=>{ W=window.innerWidth; H=window.innerHeight; canvas.width=W; canvas.height=H; });

/* --- game lifecycle --- */
function resetGame(){
  score = 0;
  crowd.count = config.initialCrowd;
  enemies = [];
  gates = [];
  bots = [];
  frames = 0;
  spawnBot(); spawnBot();
}

async function startGame(practice=false){
  inPractice = practice;
  await audio.init();
  audio.playLoopBackground();
  running = true;
  startScreen.style.display = 'none';
  resetGame();
  // spawn a few initial
  for(let i=0;i<2;i++) spawnEnemy();
  for(let i=0;i<1;i++) spawnGate();
  gameLoop();
}

/* --- end game --- */
function endGame(){
  running = false;
  audio.stopBackground();
  vibrate(200);
  audio.playCheer();
  // prompt for name and store
  setTimeout(()=>{
    let name = prompt('بازی تمام شد! اسمت رو وارد کن برای ثبت در جدول (یا خالی رها کن):', 'Player');
    if(name === null) name = 'Player';
    pushScore(name, Math.floor(score));
    renderLeaderboard();
    startScreen.style.display = 'flex';
  }, 200);
}

/* --- update/draw loop --- */
function gameLoop(){
  if(!running) return;
  frames++;
  ctx.clearRect(0,0,W,H);

  // background ground
  ctx.fillStyle = 'rgba(255,255,255,0.06)';
  ctx.fillRect(0, H-120, W, 120);

  // move player crowd horizontally toward touchX
  if(touchX !== null){
    let dx = (touchX - crowd.x) * 0.12;
    crowd.x += dx;
  } else {
    // slight auto drift to center
    crowd.x += (W/2 - crowd.x) * 0.005;
  }

  // draw finish line (top)
  ctx.fillStyle = 'rgba(0,0,0,0.06)';
  ctx.fillRect(0,60,W,40);
  ctx.fillStyle = '#fff';
  ctx.font = '18px Arial';
  ctx.fillText('خط پایان', W-110, 88);

  // draw bots (rivals)
  bots.forEach(b=>{
    b.x += (Math.random()-0.5)*1.2;
    // simple AI: move to center top slowly
    b.x += (crowd.x - b.x) * 0.002 * b.speed;
    drawCrowd(b.x, b.y, Math.max(1, b.count), b.color, 0.9);
    // bots sometimes "collect" gates/battle like player
  });

  // enemies movement + draw
  enemies.forEach((e, idx)=>{
    e.y += e.speed;
    drawCrowd(e.x, e.y, e.count, e.color);
    // check collision with player
    if(Math.abs(e.y - crowd.y) < 40 && Math.abs(e.x - crowd.x) < 60){
      // combat:
      if(crowd.count > e.count){
        // player wins
        let gain = Math.floor(e.count/2);
        crowd.count += gain;
        score += 15;
        audio.playHit();
        vibrate(30);
        // remove enemy
        enemies.splice(idx,1);
      } else {
        // player loses some
        crowd.count = Math.max(1, crowd.count - Math.floor(e.count/1.2));
        score = Math.max(0, score-5);
        audio.playHit();
        vibrate(40);
        // enemy continues
        // if crowd too small, end possibility
        if(crowd.count <= 1){
          // small chance to end game
          if(Math.random()<0.03){ endGame(); return; }
        }
      }
    }
    // despawn if off-screen
    if(e.y > H + 80) enemies.splice(idx,1);
  });

  // gates movement + draw
  gates.forEach((g, idx)=>{
    g.y += config.gateSpeed;
    ctx.fillStyle = g.type === 'add' ? '#2dd4bf' : '#fb923c';
    ctx.fillRect(g.x, g.y, g.w, g.h);
    ctx.fillStyle = '#043b6b';
    ctx.font = '14px Arial';
    ctx.fillText((g.type==='add' ? '+' : '-')+g.value, g.x + g.w/2 - 10, g.y + g.h/1.6);
    // collision with player area
    let circ = {x:crowd.x, y:crowd.y, r: 20};
    if(rectCircleCollide(circ, {x:g.x, y:g.y, w:g.w, h:g.h})){
      if(g.type === 'add') { crowd.count += g.value; score += g.value*2; audio.playCheer(); vibrate(50); }
      else { crowd.count = Math.max(1, crowd.count - g.value); score = Math.max(0, score - g.value); audio.playHit(); vibrate(40); }
      gates.splice(idx,1);
    }
    if(g.y > H + 60) gates.splice(idx,1);
  });

  // display crowd (player)
  drawCrowd(crowd.x, crowd.y, Math.max(1, Math.floor(crowd.count)), crowd.color, 1.0);

  // progress = how close to finish? derive from frames
  let progress = Math.min(1, frames / (60*40)); // ~40 seconds to reach finish in default
  // slight increase of difficulty over time
  config.enemySpawnRate += config.difficultyIncrease;
  config.gateSpawnRate += config.difficultyIncrease*0.2;

  // spawn logic
  if(Math.random() < config.enemySpawnRate) spawnEnemy();
  if(Math.random() < config.gateSpawnRate) spawnGate();
  if(Math.random() < 0.004 && Math.random()<0.2) spawnBot();

  // check finish line
  // here simulate reaching finish when frames large or crowd too big
  if(progress >= 1 || crowd.count >= 200){
    // success
    score += Math.floor(crowd.count*0.4 + progress*50);
    audio.playCheer();
    setTimeout(()=>{ endGame(); }, 220);
    running = false;
    return;
  }

  // UI update
  crowdCountEl.textContent = 'جمع: ' + Math.floor(crowd.count);
  scoreEl.textContent = 'امتیاز: ' + Math.floor(score);

  // draw small HUD bars
  ctx.fillStyle = '#00000022';
  ctx.fillRect(12,12,150,6);
  ctx.fillStyle = '#fff';
  ctx.fillRect(12,12, 150*progress, 6);

  requestAnimationFrame(gameLoop);
}

/* --- UI events --- */
playBtn.addEventListener('click', async ()=>{
  await audio.init();
  startGame(false);
});
practiceBtn.addEventListener('click', async ()=>{
  await audio.init();
  startGame(true);
});
soundToggle.addEventListener('click', ()=>{
  soundOn = !soundOn;
  soundToggle.textContent = soundOn ? '🔊' : '🔈';
  if(soundOn) audio.playLoopBackground(); else audio.stopBackground();
});
vibeToggle.addEventListener('click', ()=>{
  vibrateOn = !vibrateOn;
  vibeToggle.textContent = vibrateOn ? '📳' : '🔕';
});
menuBtn.addEventListener('click', ()=>{
  // simple menu: reset leaderboard, show tutorial
  let opt = prompt('1: پاک‌کردن جدول\n2: آموزش کوتاه\n3: توضیحات\nعدد را وارد کن:', '2');
  if(opt==='1'){ if(confirm('آیا مطمئنی جدول حذف شود؟')){ localStorage.removeItem(LB_KEY); renderLeaderboard(); alert('حذف شد'); } }
  else if(opt==='2'){ alert('لمس و کشیدن: با انگشت کشیده و گروه را کنترل کن. از دروازه‌های سبز عبور کن تا جمع زیاد شود.'); }
  else if(opt==='3'){ alert('Crowd Rush Online - نسخه آفلاین با حس آنلاین. اهداف: جمع‌سازی، رقابت با بات‌ها و ثبت امتیاز.'); }
});

/* Start: on load, show start screen and play small welcome tune when user interacts */
window.addEventListener('load', ()=>{
  // lazy init audio on first touch/click (mobile autoplay policy)
  function startAudioOnce(){
    audio.init().then(()=>{ if(soundOn) audio.playLoopBackground(); });
    window.removeEventListener('touchstart', startAudioOnce);
    window.removeEventListener('mousedown', startAudioOnce);
  }
  window.addEventListener('touchstart', startAudioOnce);
  window.addEventListener('mousedown', startAudioOnce);
  renderLeaderboard();
});

/* small helper: simulate some initial leaderboard entries to feel online */
(function seedLeaderboard(){
  let list = loadLeaderboard();
  if(list.length < 3){
    let sample = [
      {name:'SAM', score:4200},
      {name:'ALI', score:2980},
      {name:'NORA',
score:1850}
    ];
    sample.forEach(s=>{ list.push(s); });
    list.sort((a,b)=>b.score-a.score);
    list = list.slice(0,10);
    saveLeaderboard(list);
    renderLeaderboard();
  }
})();

</script>
</body>
</html>
